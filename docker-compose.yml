services:
  backend:
    build: ./backend
    container_name: django_backend
    volumes:
      - ./backend:/app
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      - db
    profiles: ["dev"]

  backend_prod:
    build: ./backend
    container_name: django_backend_prod
    command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000
    env_file:
      - .env
    environment:
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
      - STRIPE_CURRENCY=${STRIPE_CURRENCY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    depends_on:
      - db
    profiles: ["prod"]

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nextjs_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    profiles: ["dev"]

  frontend_prod:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: nextjs_frontend_prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    profiles: ["prod"]

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend_prod
      - backend_prod
    profiles: ["prod"]

  db:
    image: postgres:15
    container_name: postgres_db
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

volumes:
  postgres_data:
